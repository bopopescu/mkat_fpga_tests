#!/bin/bash
# Automated instrument activation
# Mpho Mphego
if [ -z "$*" ];
    then echo -e "Usage: $0 INSTRUMENT KATCP_HOST_IP ARRAY_NAME START_DSIM INSTRUMENT_OPS CONF_PATH \n

    INSTRUMENT: e.g. bc8n856M4k (CASE SENSATIVE)
    KATCP_HOST_IP: localhost (Default)/IP
    ARRAY_NAME: array0 (Default)
    START_DSIM: y/[n] (If not restarted hosts will not be deprogrammed)
    DEVMODE: y/[n] [DevMode] automagically download new bitstreams from https://github.com/ska-sa/mkat_fpga/devel
    INSTRUMENT_OPTS: 1110 (Default) :instrument-activate options, 1=enable, 0=disable
                                     [program, configure, require synchronisation epoch, monitor vector accumulators]
    CONF_PATH_DIR: /etc/corr/templates/ (Default)"
    exit 1;
fi

# This will abort the script immediately if part of the script fails.
set -ex
# This will give verbose output and also will abort the script immediately if part of the script fails.
# set -ex

# Convert variable contents to lower case
declare -l DSIM

export TERM=xterm
# PATH=/usr/local/sbin:/usr/local/bin:~/bin:$PATH
KCPCMD=/usr/local/bin/kcpcmd

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NORMAL=$(tput sgr0)

MACHINE=$(hostname)
INSTRUMENT=$1
KATCP_HOST_IP=${2:-${MACHINE}}
ARRAY_NAME=${3:-array0}
START_DSIM=${4:-n}
DEVMODE=${5:-n}

INSTRUMENT_OPTS=${6:-1110}
PROG=${INSTRUMENT_OPTS:0:1}
CONFIGURE=${INSTRUMENT_OPTS:1:1}
REPOCH=${INSTRUMENT_OPTS:2:1}
MVACC=${INSTRUMENT_OPTS:3:1}

CONF_PATH_DIR=${6:-'/etc/corr/templates/'}
CONF_PATH=${CONF_PATH_DIR}${INSTRUMENT}


function repeatStr {
    input=$1
    count=$2
    myString=$(printf "%${count}s")
    echo "${myString// /$input }"
}

function print_function {
    STRING=$1
    printf "${GREEN}$STRING ${NORMAL}\n"
}

# function cleanup {
#     print_function "Code cleanup!!!!!!"
#     excode=$?
#     cd $CONF_PATH_DIR && git checkout -- $INSTRUMENT > /dev/null 2>&1 && cd -
#     exit $excode
# }

if [ $DEVMODE == y ]; then
    # Some cleaning up before exiting.
    # trap cleanup EXIT
    print_function "Downloading latest DEVEL bitstreams from github.com and replacing bitstream location on template."
    BITSTREAMS=`grep ^bitstream $CONF_PATH | cut -f3 -d " "`
    if $(echo "${BITSTREAMS}" | grep -q "/tmp") && $(ls /tmp/*.fpg 1> /dev/null 2>&1); then
        print_function "Seems like bitstreams are already in /tmp"
    else
        for bitstream in $BITSTREAMS; do
            FILENAME="/tmp/`echo ${bitstream} | rev | cut -d'/' -f1 | rev`";
            URL=`echo $bitstream | cut -c15-`
            print_function "Downloading file: https://raw.githubusercontent.com/ska-sa/mkat_fpga/devel${URL}";
            wget --tries=5 -O $FILENAME "https://raw.githubusercontent.com/ska-sa/mkat_fpga/devel${URL}";
            print_function "Replacing: ${bitstream}, with ${FILENAME} on ${CONF_PATH}\n\n"
            sed -i -e "s=$bitstream=$FILENAME=" $CONF_PATH
        done
        print_function "New bitstream destination:\n\n`grep ^bitstream $CONF_PATH`"
        printf "\n\n\n"
    fi
fi

print_function "Initialisation ${INSTRUMENT} on ${KATCP_HOST_IP}"
VPOL=$(grep -v \#  $CONF_PATH | grep pol0_destination_start_ip | cut -f 3 -d' ')
HPOL=$(grep -v \#  $CONF_PATH | grep pol1_destination_start_ip | cut -f 3 -d' ')
DATAPORT=$(grep 10gbe_port $CONF_PATH | tail -1 | cut -f 3 -d' ')
NUM_INPUTS=$((($(grep ^source_mcast_ips ${CONF_PATH} | grep -o , | wc -l)+1)/2))
ARRAY_INPUTS=`repeatStr "${VPOL}+1:${DATAPORT} ${HPOL}+1:${DATAPORT}" $NUM_INPUTS`
print_function "No of Inputs: ${NUM_INPUTS} and FEngine Multicast IPs (VPOL: ${HPOL} and HPOL: ${VPOL}), Port: ${DATAPORT} "

DSIM=$(grep ^host $CONF_PATH | tail -1 | cut -d ' ' -f 3);
if [ ${START_DSIM} == y ]; then
    COUNT=1
    while [ "${COUNT}" -le 5 ]; do
        print_function "Starting DEngine..."
        if [[ $DSIM = *"roach"* ]]; then
            StopDMC="/usr/local/bin/stop-pseudo-dmc";
            StartDMC="/usr/local/bin/start-pseudo-dmc";

            if [ -x "$(command -v ${StopDMC})" ]; then
                ${StopDMC} || ${KCPCMD} -t 30 -s localhost:9010 halt
                sleep 10;
            elif [ -x "$(command -v ${StartDMC})" ]; then
                ${StartDMC} ${DSIM}
                sleep 10;
            fi
        fi
        (( COUNT++ ));
        $(which corr2_dsim_control.py) -c ${CONF_PATH} --program --start --zeros-sine --zeros-noise && break;
        sleep 5;
    done;
else
    print_function "We assuming that the DEngine is currently running..."
fi

if [[ $DSIM = *"roach"* ]]; then
    SYNC_EPOCH=$($KCPCMD -s ${KATCP_HOST_IP}:9011 sensor-value synchronisation-epoch | grep -a '^#sensor-value' | cut -f 2 -d' ')
else
    SYNC_EPOCH=$($(which corr2_dsim_control.py) -c ${CONF_PATH} --resync | grep ^Reset | cut -f7 -d ' ')
fi

SYNC_TIME=$(date -d @${SYNC_EPOCH})
print_function "Synchronisation Epoch, set to (Readable): ${SYNC_TIME}"
if [ ${SYNC_EPOCH} != 0 ]; then
    sleep 1;
    print_function "$Initialising INSTRUMENT: ${INSTRUMENT}"
    ${KCPCMD} -t 31 -s ${KATCP_HOST_IP}:7147 subordinate-halt ${ARRAY_NAME} || true
    sleep 1
    ARRAY=$(${KCPCMD} -t 30 -s ${KATCP_HOST_IP}:7147 subordinate-create ${ARRAY_NAME} ${ARRAY_INPUTS} | grep -a '!subordinate-create' | cut -d ' ' -f 3 | cut -f1 -d, )
    print_function "Port :${ARRAY} created on ${ARRAY_NAME}"
    ${KCPCMD} -t 500 -s $KATCP_HOST_IP:${ARRAY} digitiser-synch-epoch ${SYNC_EPOCH}
    sleep 1;
    ${KCPCMD} -t 1000 -s $KATCP_HOST_IP:${ARRAY} instrument-activate ${INSTRUMENT} ${PROG} ${CONFIGURE} ${REPOCH} ${MVACC}
else
    print_function "Restart the DEngine, Having issues!!!"
    exit 1
fi
